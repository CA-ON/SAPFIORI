 SAP FIORI

Instalar VS code
Instalar NODE.js instalar
Abrir Visal Study Code
Instalar libs
SAP FIORI TOOLS EXTECION PACKS
UI5 XML SUPORT
https://github.com/muriloportugal/fiori_consulta_produtos
https://github.com/robliol/Projeto_Barcode_SAPFIORI
Criada pasta DEV/SAPFIORI/CODIGO_BARRAS
Nome do projeto: Projeto Codigo de barras
Entao vamos criar o diretorio; codigo_barras e vammos nos posicionar na pasta
$ C:\dev\sapfiori\codigo_barras>
Para o sistema gerar o projeto MVC 
$ dotnet new mvc --auth None
Depois dentro do diretorio do projeto digitamos code . para que carregue o Visual Studio Code
$ code . 

Abrir o VS code clicar em Open FOLDER
Abrir a pasta Codigo_Barras
View-_> Comand Pallet ou F1.
Depois de aberto a pasta vamos no VS code , clicamos na barra superior da tela
 e apertamos F1.
digitamos Fiori onde ira aparecer todas as funcionalidades que foram instaladas pela extensão.
aparecera uma lista fiori: funcionalidades
Vamos escolher
fiori:Open Aplication Generation
Esta funcionalidade é para a geração de aplicativos com layouts padroes preconstruidos
Existem dois tipos de aplicativos: SAPUI5 Freestyle e Fiori elements
Fiori elements é para quem tem acesso ao SAP
Depois disso vamos escolher
SAPUI5 Freestyle - Para construirmos aplicativos OFF line 
Vamos escolher fazer um app do Zero escolhendo a opção
Clicamos em Template Wizard
->SAPUI5 Aplication ->  NEXT
Neste momento é que escolhemos em qual base queremos acessar , SAP, DBDADOS ou NONE
Vamos escolher NONE
Data Source -> None -> NEXT -> Nome da tela Vou deixar View0001 -> NEXT
Modulo Name -> Nome do projeto -> consulta_produtos
Titulo Name -> Consulta de Produtos
Aplication Name Space -> Em branco
Descripition : Consulta de Produtos
Depois clicar em Finish
Aguardar o programa ser gerado

Depois do programa gerado Execute a aplicação para verificar erros de instalação de pacotes.

Programa gerado vsamos para o desenvolvimento da interface:
Apos gerar o programa sao geradas varias pastas abaixo do projeto
Onde vamos concentrar o desenvolvimento adotando a metodologia MVC sera a pasta WEBAPP
nela conterá as pastars de , Controle, Modelos e Visões.
Iniciaremos criando a View, abrimos a view1.view.xml
Colocamos o seguinte codigo na pasta VIEW

VIEW->App.view.xml

<mvc:View controllerName="consultaprodutos.controller.App"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"
    xmlns="sap.m">
    <App id="app">
    </App>
</mvc:View>



VIEW->View1.view.xml:

<mvc:View controllerName="consultaprodutos.controller.View1"
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"
    xmlns="sap.m">
    <Page id="page" title="{i18n>title}">
      <content>
        <FlexBox id="idFboxBuscar" justifyContent="Center">
          <Input id="inpBuscar"/>
          <Button id="idButton" text="Buscar" press="onPressBusca"/>
          <Button id="btnVoltar" text="Voltar" press="onPressVoltar"/>            
        </FlexBox>

        <VBox id="productBox" visible="true">      
          <ObjectHeader 
            title="{ModeloProduto>/product/product_name}"
            number="{ModeloProduto>/product/quantity}"> 

            <attributes>
                <ObjectAttribute title="Código de Barras"  text="{ModeloProduto>/code}" />
                <ObjectAttribute title="Marca"  text="{ModeloProduto>/product/brands}" />
                
            </attributes>
          </ObjectHeader>
        </VBox>

            <Panel headerText="Informações" >
              <content>
                <HBox >
                  <Image src="{ModeloProduto>/product/image_front_url}" width="5em" press="onClickImage"/>
                    <VBox>
                      <ObjectAttribute title="Categoria"  text="{ModeloProduto>/product/categories}" />
                      <ObjectAttribute title="Avisos"  text="{ModeloProduto>/product/ecoscore_extended_data/impact/warnings}" />
                      <ObjectAttribute title="Fabricado em"  text="{ModeloProduto>/product/manufacturing_places}" />
                    </VBox>
                </HBox>
              </content>
            </Panel>
  
            <Panel headerText="Informações" >
              <content>
                <HBox >
                  <Image src="{ModeloProduto>/product/image_ingredients_url}" width="5em" press="onClickImage"/>
                   <Table items = "{ModeloProduto>/product/ingredients}">
                    <columns>
                      <Column >
                        <Text text= "Descrição"/>
                      </Column>
                      <Column >
                        <Text text= "% Minima"/>
                      </Column>
                      <Column >
                        <Text text= "% Máxima"/>
                      </Column>
                      <Column >
                        <Text text= "% Estimada"/>
                      </Column>
                    </columns>
                    <items>
                      <ColumnListItem >
                         <cells>
                          <Text text="{ModeloProduto>text}"/>
                            <Text text="{ModeloProduto>percent_min}"/>
                              <Text text="{ModeloProduto>percent_max}"/>
                                <Text text="{ModeloProduto>percent_estimate}"/>
                         </cells>
                      </ColumnListItem>
                    </items>
                   </Table>
                </HBox>
              </content>  
            </Panel>    
      </content>
          
    </Page>
</mvc:View>


Agora vamos implementar as ações do botao no arquivo View1.controller.js na pasta CONTROLLER
OBS:
Aqui seria onde iriamos declarar e fazer nossa programação de funcões equivaleno com ABAP seria
o local de implementação dos PERFORMS, local de INICIALIZACA".

Erro do Lauch.Json - https://www.youtube.com/watch?v=UH9iJcZjUes

Arquivo CONTROLLER-> App.controller.js

sap.ui.define(
    [
        "sap/ui/core/mvc/Controller"
    ],
    function(BaseController) {
      "use strict";
  
      return BaseController.extend("consultaprodutos.controller.App", {
        onInit() {
        }
      });
    }
  );
  
Arquivo: CONTROLLER-> View1.controller.js

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    // Incluir nova biblioteca SAP chamada library 
    "sap/m/library",
    //Model é responsável por exibir conteudo na tela
    "sap/ui/model/json/JSONModel"
    ],
    /**
     * @param {typeof sap.ui.core.mvc.Controller} Controller
     */
    function (Controller, library, JSONModel) {
        "use strict";
        // Ponto de declaração das variaveis globais, nesse caso utiliza o VAR
        let urlObject = library.URLHelper;

        return Controller.extend("consultaprodutos.controller.View1", {
            onInit: function () {
               //1 - variavel objeto vazio
               let produto = {};
               //2- Instanciar o modelo, o parametro construtor será a var produto
               let productModel = new JSONModel(produto);

               //3- Atribui o modelo a tela
               //this no Javascript eigual ao ME no ABAP e utilizar 
               //3.1 getView e o metodo para recer a instancia da tela
               let view = this.getView();
               //3.2 - Atribuir o modelo a instancia da tela atraves da variavel view
               // o nome ModeloProduto é o ID ou apelido do modelo que tem que ser criado
               view.setModel(productModel, "ModeloProduto");

            },
            // Evento do click da imágem criado no MainView
            onClickImage: function(oEvent){
            //A clausula true faz com que a imagem seja aberta em uma nova janela
                urlObject.redirect(oEvent.getSource().getSrc(), true );
            },
            onPressVoltar: function(){
                alert('retornar a Home');
            },
            // Evento do click dd botão criado no MainView
            onPressBusca: function(){
                let input;
                input = this.byId("inpBuscar");
                let valor = input.getValue();
                // alert(valor);

                //Buscar dados na API externa da open food fact

                //passar os parametros de chamadas da API
                let parameters = {
                    url : "https://world.openfoodfacts.org/api/v2/product/" + valor,
                    method : "GET",
                    async : true,
                    crossDomain : true
                };
                
                //executar a chamada da API no servidor
                //promise = quando uma função retorna como parametro de exportação 
                //outra função 
                $.ajax(parameters)
                .done(function (resposta_api){
                    
                    // Obter a instancia da View criado no SET acima já com os dados 
                    // recebidos da API
                    let oProdutoModel = this.getView().getModel("ModeloProduto");
                    //clear - limpar dados antigos da tela
                    oProdutoModel.setData({});
                    oProdutoModel.refresh();
                    //Enviar os dados recebidos da API para a tela
                    oProdutoModel.setData(resposta_api);
                    oProdutoModel.refresh();
                }.bind(this) ) //o bind permite acesso dos dados da função externa sejam enxergados dentro desta função
                
                //retona parametros quando executado com sucesso
                .fail(function (){
                    debugger // Break Point
                }); //retorna parametros quando erro - equivae ao exception no ABAP
                
                //Variável de tipo texto
                ///let material = "Água Mineral Natural";
                //Variável de tipo numerico
                //let peso = 500;
                //let uom = 'ml';
                //numerico com casas decimais
                //let qtdsodio = 15.66;
                //booleano - abap_bool
                //let conteudoliquido = true;

                //tabela interna no Java script - array
                // tebela interna de 4 registros
                //let composicao = ["bicarbonato", "magnesio","sulfato","brometo"];
                //estrutura - tipo com varias propriedades - ou também chamado de objeto
                //let produto = { 
                //    descricao : "chá verde",
                //    marca     : "quaker",
                //    peso : 130,
                //    uom : "g"
                //}
            }
        });
    
    });



2a Aula

Falou sobre fundamentos de se conseguir recolocação no trabalho
depois desenvolveu no programa Main.controller.js

Abrir URL-> word.openfoodfacts.org/api/v2/product/ + barcode
Barcode = 3268840001008

word.openfoodfacts.org/api/v2/product/3268840001008

https://www.youtube.com/redirect?event=live_chat&redir_token=QUFFLUhqbndRWUxGeGNHUDJSSTFrQ2hzblh5UVU2aGJrQXxBQ3Jtc0tualpwMkZXZGtGYzh5TlM4ZTZLY3ZpVDVkWUhnRXEwTGI1SFBPUkNsZDF1TVZDUlNrZGcxTU8yZ1JYWE02RnI3cE9Ya0RBRzkwZ1hYS0l1YnZVVDJTeVdmOWxzMVdabEhsazI0c01Dd2dGTEpNY2VSSQ&q=https%3A%2F%2Fworld.openfoodfacts.org%2F
https://www.youtube.com/redirect?event=live_chat&redir_token=QUFFLUhqbGJ6aWpSWkdMLVNjdXBLLXJZcm5sbHJyQVBTd3xBQ3Jtc0tuR2loR0V6VWg4eTJuaEVKSzU2Ukt1QVVQYnROZk5oN3l3ZjJBX1B3bkNwVzkzSnZNcVNFbm5pMTU5dzNWN2E5aXc2aWdBR0JYWWZBcmhhVDd1WjFzeDZkU0ZTX3Vhd05EazdVLVRpRHdrcVpFM2tWYw&q=https%3A%2F%2Fworld.openfoodfacts.org%2Fapi%2Fv2%2Fproduct%2F

Jason formatter Devolve o conteudo arrumado
Ou instala esta extenção do googlr com o Json Handle
https://www.youtube.com/redirect?event=live_chat&redir_token=QUFFLUhqa2Q5T1ZKSjZxUWF6RjZNVTItZGZfQkFSWDluZ3xBQ3Jtc0traDF2QjZUekhTSzhzRWFDSnZjOGQwbnVyZ3RWQ1BERWFjQ0ZYRTRsWUY5LTdDSXc5T1NPSGhQZjFNbi1Fa0Z2bUFzNXJNcE9mYVZXN09ZbUdVRGRzWVA3Nm52RDhkSm1RVnhXZDFYcVVoWHlsbGpNNA&q=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fjson-handle%2Fiahnhfdhidomcpggpaimmmahffihkfnj


Criamos um arquivo na pasta MODEL e criamos um arquivo PRODUTOS.JSON
Nele colocamos o conteudo do barcode extraido da url+Barcode.
Salvamos no formato Java script atraves da extensao JavaScript Formated

Depois, vamos mostra os dados deste produto no aplicativo.
Iremos acessar o arquivo Manifest.JSON ele é o arquivo de inicialização dos programas SAP
Seria o arquivo de configuração das rotas, conexao com banco de dados, funções de navegação, entre outras definições.
Nele tem varios objetos definidos com atributos, Vamos no objeto 
Vamos acressentar esta instrução que sera o terceiro objeto definido dentro dele:
"models" :{
 "i18n":{ Arquivo de traduções
 },
 " ":{ Arquivo de datasource Banco de dados

 },
 "ModeloProduto ":{
	"type": "sap.ui.model.json.JSONModel",
	"uri": "model/produtos.json",
 }
}

Vamos ver agora como colocar os dados ou relacionalos a nossa aplicação.
Vamos acessar a nossa view0001.view.xml

Colocamos o seguinte codigo na pasta VIEW->View1.view.xml:
Transomos os campos do arquivo produtos.json e substituimos na VIEW.

<mvc:View controllerName="consultaprodutos.controller.View1"
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"
    xmlns="sap.m">
    <Page id="page" title="{i18n>title}">
      <content>
        <FlexBox id="idFboxBuscar" justifyContent="Center">
          <Input id="inpBuscar"/>
          <Button id="idButton" text="Buscar" press="onPressBusca"/>
          <Button id="btnVoltar" text="Voltar" press="onPressVoltar"/>            
        </FlexBox>

        <VBox id="productBox" visible="true">      
          <ObjectHeader 
            title="{ModeloProduto>/product/product_name}"
            number="{ModeloProduto>/product/quantity}"> 

            <attributes>
                <ObjectAttribute title="Código de Barras"  text="{ModeloProduto>/code}" />
                <ObjectAttribute title="Marca"  text="{ModeloProduto>/product/brands}" />
                
            </attributes>
          </ObjectHeader>
        </VBox>

            <Panel headerText="Informações" >
              <content>
                <HBox >
                  <Image src="{ModeloProduto>/product/image_front_url}" width="5em" press="onClickImage"/>
                    <VBox>
                      <ObjectAttribute title="Categoria"  text="{ModeloProduto>/product/categories}" />
                      <ObjectAttribute title="Avisos"  text="{ModeloProduto>/product/ecoscore_extended_data/impact/warnings}" />
                      <ObjectAttribute title="Fabricado em"  text="{ModeloProduto>/product/manufacturing_places}" />
                    </VBox>
                </HBox>
              </content>
            </Panel>
  
            <Panel headerText="Informações" >
              <content>
                <HBox >
                  <Image src="{ModeloProduto>/product/image_ingredients_url}" width="5em" press="onClickImage"/>
                   <Table items = "{ModeloProduto>/product/ingredients}">
                    <columns>
                      <Column >
                        <Text text= "Descrição"/>
                      </Column>
                      <Column >
                        <Text text= "% Minima"/>
                      </Column>
                      <Column >
                        <Text text= "% Máxima"/>
                      </Column>
                      <Column >
                        <Text text= "% Estimada"/>
                      </Column>
                    </columns>
                    <items>
                      <ColumnListItem >
                         <cells>
                          <Text text="{ModeloProduto>text}"/>
                            <Text text="{ModeloProduto>percent_min}"/>
                              <Text text="{ModeloProduto>percent_max}"/>
                                <Text text="{ModeloProduto>percent_estimate}"/>
                         </cells>
                      </ColumnListItem>
                    </items>
                   </Table>
                </HBox>
              </content>  
            </Panel>    
      </content>
          
    </Page>
</mvc:View>

Arquivo: manifest.json

{
  "_version": "1.49.0",
  "sap.app": {
    "id": "consultaprodutos",
    "type": "application",
    "i18n": "i18n/i18n.properties",
    "applicationVersion": {
      "version": "0.0.1"
    },
    "title": "{{appTitle}}",
    "description": "{{appDescription}}",
    "resources": "resources.json",
    "sourceTemplate": {
      "id": "@sap/generator-fiori:basic",
      "version": "1.9.2",
      "toolsId": "a159efcf-bc24-4b38-8fdf-0988bc9d8232"
    }
  },
  "sap.ui": {
    "technology": "UI5",
    "icons": {
      "icon": "",
      "favIcon": "",
      "phone": "",
      "phone@2": "",
      "tablet": "",
      "tablet@2": ""
    },
    "deviceTypes": {
      "desktop": true,
      "tablet": true,
      "phone": true
    }
  },
  "sap.ui5": {
    "flexEnabled": true,
    "dependencies": {
      "minUI5Version": "1.112.1",
      "libs": {
        "sap.m": {},
        "sap.ui.core": {},
        "sap.f": {},
        "sap.suite.ui.generic.template": {},
        "sap.ui.comp": {},
        "sap.ui.generic.app": {},
        "sap.ui.table": {},
        "sap.ushell": {}
      }
    },
    "contentDensities": {
      "compact": true,
      "cozy": true
    },
    "models": {
      "i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "settings": {
          "bundleName": "consultaprodutos.i18n.i18n"
        }
      },
      "ModeloProdutoArquivo" : { 
        "type": "sap.ui.model.json.JSONModel",
        "uri": "model/produtos.json"
      }
    },
    "resources": {
      "css": [
        {
          "uri": "css/style.css"
        }
      ]
    },
    "routing": {
      "config": {
        "routerClass": "sap.m.routing.Router",
        "viewType": "XML",
        "async": true,
        "viewPath": "consultaprodutos.view",
        "controlAggregation": "pages",
        "controlId": "app",
        "clearControlAggregation": false
      },
      "routes": [
        {
          "name": "RouteView1",
          "pattern": ":?query:",
          "target": [
            "TargetView1"
          ]
        }
      ],
      "targets": {
        "TargetView1": {
          "viewType": "XML",
          "transition": "slide",
          "clearControlAggregation": false,
          "viewId": "View1",
          "viewName": "View1"
        }
      }
    },
    "rootView": {
      "viewName": "consultaprodutos.view.App",
      "type": "XML",
      "async": true,
      "id": "App"
    }
  }
}


3a AULA




